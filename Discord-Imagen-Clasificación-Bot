import discord
from discord.ext import commands
from modelo import detect_bird


intents = discord.Intents.default()
intents.message_content = True

bot = commands.Bot(command_prefix='$', intents=intents)

@bot.event
async def on_ready():
    print(f'We have logged in as {bot.user}')

@bot.command()
async def hello(ctx):
    await ctx.send(f'Hi! I am a bot {bot.user}!')

@bot.command()
async def heh(ctx, count_heh = 5):
    await ctx.send("he" * count_heh)


@bot.command()
async def upload_image(ctx):
    if len(ctx.message.attachments) == 0:
        await ctx.send("No se ha encontrado ninguna imagen adjunta.")
    else:
        # Iterar sobre los archivos adjuntos
        for attachment in ctx.message.attachments:
            if attachment.filename.endswith(('jpg', 'jpeg', 'png', 'gif')):
                # Guardar la imagen en el sistema de archivos local
                filepath = f"images/{attachment.filename}"
                await attachment.save(filepath)
                
                # Enviar la URL de la imagen de vuelta al usuario
                await ctx.send(f"Imagen {attachment.filename} guardada con éxito. Disponible en: {attachment.url}")

                resultado= detect_bird(filepath)
                await ctx.send(resultado)
            else:
                await ctx.send(f"El archivo {attachment.filename} no es una imagen válida.")
                
bot.run("...")

segunda carpeta: 

import PIL
PIL.__version__
from PIL import Image
from keras.models import load_model 
from PIL import Image, ImageOps 
import numpy as np

def detect_bird(path, model_path="keras_model.h5", labels_path="labels.txt"):

  # Disable scientific notation for clarity
  np.set_printoptions(suppress=True)

  # Load the model
  model = load_model(model_path, compile=False)

  # Load the labels
  class_names = open(labels_path, "r").readlines()

  # Create the array of the right shape to feed into the keras model
  # The 'length' or number of images you can put into the array is
  # determined by the first position in the shape tuple, in this case 1
  data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)

  # Replace this with the path to your image
  image = Image.open(path).convert("RGB")

  # resizing the image to be at least 224x224 and then cropping from the center
  size = (224, 224)
  image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

  # turn the image into a numpy array
  image_array = np.asarray(image)

  # Normalize the image
  normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

  # Load the image into the array
  data[0] = normalized_image_array

  # Predicts the model
  prediction = model.predict(data)
  index = np.argmax(prediction)
  class_name = class_names[index]
  confidence_score = prediction[0][index]

  if class_name[2:-1] == "goreom":
    return class_name[2:-1], confidence_score, "maíz partido, granos de cereales, avena, trigo, arroz e insectos secos"
  elif class_name[2:-1] == "paloma":
    return class_name[2:-1], confidence_score, "garbanzos, trigo, cebada, semillas, trigo sarraceno, mijo, guisantes, lentejas y otros cereales en forma seca."
  elif class_name[2:-1] == "budgie":
    return class_name[2:-1], confidence_score, "pollo, maiz, pan"
